{"version":3,"sources":["serviceWorker.js","components/PercentageLoader.jsx","index.js"],"names":["Boolean","window","location","hostname","match","PercentageLoader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","status","completed","_this2","perfData","performance","timing","EstimatedTime","loadEventEnd","navigationStart","time","parseInt","stepTime","Math","abs","floor","timer","setInterval","setState","clearInterval","react_default","a","createElement","Fragment","children","className","Component","App","React","lazy","Promise","all","__webpack_require__","e","then","bind","Loading","style","color","ReactDOM","render","components_PercentageLoader","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGC0BSC,qBAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,EACRC,WAAW,GAJIT,mFAOC,IAAAU,EAAAP,KACdQ,EAAWjB,OAAOkB,YAAYC,OAChCC,IAAkBH,EAASI,aAAeJ,EAASK,iBACnDC,EAA+C,IAAxCC,SAAUJ,EAAgB,IAAQ,IAEzCK,EAAWC,KAAKC,IAAID,KAAKE,MAAML,EADvB,MAERT,EAAS,EACTe,EAAQC,YAAY,WAClBhB,GAAU,EACVE,EAAKe,SAAS,CAAEjB,WACF,KAAVA,IACFkB,cAAcH,GACdb,EAAKe,SAAS,CAAEhB,WAAW,MAE5BU,oCAGL,OACEQ,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACG3B,KAAKI,MAAME,UACVN,KAAKJ,MAAMgC,SAEXJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,SAAI1B,KAAKI,MAAMC,OAAf,eAhCiByB,cCKzBC,EAAMC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAEvBC,EAAUhB,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAAEC,MAAO,SAArB,eAEhBC,IAASC,OACPpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAMqB,SAAP,CAAgBC,SAAUP,GACxBhB,EAAAC,EAAAC,cAACK,EAAD,SAINiB,SAASC,eAAe,SF6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GACjCA,EAAaC","file":"static/js/main.0371eb32.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../css/PercentageLoader.css\";\n\nclass PercentageLoader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 0,\n      completed: false\n    };\n  }\n  componentDidMount() {\n    let perfData = window.performance.timing, // The PerformanceTiming interface represents timing-related performance information for the given page.\n      EstimatedTime = -(perfData.loadEventEnd - perfData.navigationStart),\n      time = parseInt((EstimatedTime / 1000) % 60) * 100,\n      range = 100,\n      stepTime = Math.abs(Math.floor(time / range)),\n      status = 0,\n      timer = setInterval(() => {\n        status += 1;\n        this.setState({ status });\n        if (status == 100) {\n          clearInterval(timer);\n          this.setState({ completed: true });\n        }\n      }, stepTime);\n  }\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.completed ? (\n          this.props.children\n        ) : (\n          <div>\n            <div className=\"Loader\">\n              <p>{this.state.status}%</p>\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PercentageLoader;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport PercentageLoader from \"./components/PercentageLoader\";\n\nconst App = React.lazy(() => import(\"./App\"));\n\nconst Loading = <div style={{ color: \"gray\" }}>Loading ...</div>;\n\nReactDOM.render(\n  <div>\n    <PercentageLoader>\n      <React.Suspense fallback={Loading}>\n        <App />\n      </React.Suspense>\n    </PercentageLoader>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}